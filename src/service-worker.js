/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, NetworkFirst } from 'workbox-strategies';

clientsClaim();

const EXTERNAL_HOSTS_TO_CACHE = [
  "fonts.googleapis.com",
  "maxcdn.bootstrapcdn.com",
  "ajax.googleapis.com",
  "cdnjs.cloudflare.com",
  "stackpath.bootstrapcdn.com",
  "fonts.gstatic.com",
];

const FILES_TO_CACHE = [
  "manifest.json",
  "robots.txt",
  "browserconfig.xml",
];

const IMAGES_TO_CACHE = /\.((png)|(jpg)|(svg)|(ico)|(jpeg)|(gif))/g;

const EXTERNAL_IMAGES_TO_CACHE = /(^https:\/\/lh3\.googleusercontent\.com)/g

//const API_CALLS_TO_CACHE = process.env.REACT_APP_HOST_NAME;

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this is a URL that starts with api, skip.
    if (url.pathname.startsWith('/api')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

//same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  (data) => {
    let url = data.url;
    if (url.origin === self.location.origin && url.pathname.match(IMAGES_TO_CACHE)) {
      return true;
    }
    return false;
  },
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 100 }),
    ],
  })
);

// external images
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  (data) => {
    let url = data.url;
    if (url.href.match(EXTERNAL_IMAGES_TO_CACHE)) {
      return true;
    }
    return false;
  },
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'ext_images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 1 }),
    ],
  })
);

// external hosts (css,fonts,etc)
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  (data) => {
    let url = data.url;
    if (EXTERNAL_HOSTS_TO_CACHE.includes(url.host)) {
      return true;
    }
    return false;
  },
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new NetworkFirst({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 10 }),
    ],
  })
);

// FILES TO CACHE (manifest, robots, etc)
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  (data) => {
    let url = data.url;
    if (url.origin === self.location.origin && FILES_TO_CACHE.map(v => url.pathname.endsWith(v)).includes(true)) {
      return true;
    }
    return false;
  },
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new NetworkFirst({
    cacheName: 'public',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 10 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', async (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

self.addEventListener('push', function (event) {
  console.log('[Service Worker] Push Received.');
  console.log(`[Service Worker] Push had this data`,event.data);

  const { title,options } = event.data.json();

  event.waitUntil(self.registration.showNotification(title, options));
});

self.addEventListener('notificationclick', function (event) {
  console.log('[Service Worker] Notification click Received.');

  event.notification.close();

  event.waitUntil(
    console.log(event.notification.data),
    self.clients.openWindow(event.notification.data.url)
    //clients.openWindow('https://developers.google.com/web/')
  );
});
